package edu.hkcc.pacmanrobot.robot.utils;

import com.pi4j.io.gpio.GpioController;
import com.pi4j.io.gpio.GpioFactory;
import com.pi4j.io.gpio.GpioPinDigitalOutput;
import com.pi4j.io.gpio.RaspiPin;
import edu.hkcc.pacmanrobot.utils.Point2D;

import static com.pi4j.wiringpi.SoftPwm.softPwmCreate;
import static com.pi4j.wiringpi.SoftPwm.softPwmWrite;
import static edu.hkcc.pacmanrobot.utils.Maths.*;

/**
 * Created by beenotung on 3/3/15.
 */
public class L298NAO {
    public static final int R_F = 5;
    public static final int R_B = 6;
    public static final int L_B = 13;
    public static final int L_F = 19;
    public static final int PWM_MAX_RANGE = 100;
    public static GpioController gpio = GpioFactory.getInstance();
    public static final GpioPinDigitalOutput E_R = gpio.provisionDigitalOutputPin(RaspiPin.GPIO_04);
    public static final GpioPinDigitalOutput E_L = gpio.provisionDigitalOutputPin(RaspiPin.GPIO_05);
    public static boolean ready = false;

    public static void enableMotor(GpioPinDigitalOutput pin, boolean on) {
        if ((on) && pin.isLow()) pin.high();
        else if ((!on) && pin.isHigh()) pin.low();
    }

    public static void left_on() {
        enableMotor(E_L, true);
    }

    public static void left_off() {
        enableMotor(E_L, false);
    }

    public static void right_on() {
        enableMotor(E_R, true);
    }

    public static void right_off() {
        enableMotor(E_R, false);
    }

    public static void setGpio(GpioPinDigitalOutput gpio, boolean isHigh) {
        if (isHigh && gpio.isLow())
            gpio.high();
        else if (!isHigh && gpio.isHigh())
            gpio.low();
    }

    public static void setTwoGpio(GpioPinDigitalOutput gpio1, GpioPinDigitalOutput gpio2, boolean isHigh) {
        setGpio(gpio1, isHigh);
        setGpio(gpio2, isHigh);
    }

    public static void setGpioPair_FT(GpioPinDigitalOutput falseGpio, GpioPinDigitalOutput trueGpio) {
        if (falseGpio.isHigh()) falseGpio.low();
        if (trueGpio.isLow()) trueGpio.high();
    }

    public static void move_pwm(Point2D point2D) {
        move_pwm(point2D._1, point2D._2);
    }

    public static void setMotorPwm(GpioPinDigitalOutput enablePin, int forwardPin, int backwardPin, int pwm) {
        if (pwm == 0) {
            setGpio(enablePin, false);
            softPwmWrite(forwardPin, pwm);
            softPwmWrite(backwardPin, pwm);
        } else {
            setGpio(enablePin, true);
            if (pwm > 0) {
                softPwmWrite(backwardPin, 0);
                softPwmWrite(forwardPin, pwm);
            } else {
                softPwmWrite(forwardPin, 0);
                softPwmWrite(backwardPin, -pwm);
            }
        }
    }

    public static void move_pwm(double direction) {
        move_pwm(direction, 1d);
    }

    /**
     * @param direction (radian)
     *                  0 to PI*2
     * @param pwm       0 to 1
     */
    public static void move_pwm(double direction, double pwm) {
        if (pwm == 0) {
            both_stop();
            return;
        }
        int l, r;
        if (isInRange(direction, F_R)) {
            l = 1;
            r = 0;
        } else if (isInRange(direction, R)) {
            l = 1;
            r = -1;
        } else if (isInRange(direction, B_R)) {
            l = -1;
            r = 0;
        } else if (isInRange(direction, B)) {
            l = r = -1;
        } else if (isInRange(direction, B_L)) {
            l = 0;
            r = -1;
        } else if (isInRange(direction, L)) {
<<<<<<< HEAD
            l = -1;
            r = 1;
=======
            left_backward();
            right_forward();
>>>>>>> server

        } else if (isInRange(direction, F_L)) {
            l = 0;
            r = 1;
        } else //if (Maths.isInRange(direction,F))
        {
            l = r = 1;
        }
        l *= (pwm * PWM_MAX_RANGE);
        r *= (pwm * PWM_MAX_RANGE);
        left_pwm(l);
        right_pwm(r);
    }

    /**
     * @param pwm direction -100 to 100
     *            -100 = full speed backward
     *            100 = full sped forward
     *            0 = stop
     */
    public static void right_pwm(int pwm) {
        setMotorPwm(E_R, R_F, R_B, pwm);
    }

    /**
     * @param pwm direction -100 to 100
     *            -100 = full speed backward
     *            100 = full sped forward
     *            0 = stop
     */
    public static void left_pwm(int pwm) {
        setMotorPwm(E_L, L_F, L_B, pwm);
    }

    public static void both_stop() {
        left_off();
        right_off();
    }

    public static void setup() {
        softPwmCreate(5, 0, PWM_MAX_RANGE);
        softPwmCreate(6, 0, PWM_MAX_RANGE);
        softPwmCreate(13, 0, PWM_MAX_RANGE);
        softPwmCreate(19, 0, PWM_MAX_RANGE);
        ready = true;
    }

}